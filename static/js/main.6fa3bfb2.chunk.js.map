{"version":3,"sources":["layout/Calculator/Screen/ResultScreen/ResultScreen.js","layout/Calculator/Screen/ComputationScreen/ComputationScreen.js","layout/Calculator/Screen/Screen.js","layout/Calculator/Keypad/KeypadRow/KeypadRow.js","components/Button/Button.js","layout/Calculator/Keypad/Keypad.js","layout/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["resultScreen","className","computationScreen","screen","ComputationScreen","ResultScreen","keypadRow","props","children","button","classes","type","push","join","keypad","KeypadRow","Button","Calculator","state","equation","result","Screen","this","Keypad","React","Component","app","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAUeA,EANM,kBACnB,yBAAKC,UAAU,iBAAf,OCMaC,EARW,kBACxB,yBAAKD,UAAU,sBAAf,UCWaE,EATA,kBACb,6BAASF,UAAU,UACjB,kBAACG,EAAD,MACA,kBAACC,EAAD,QCCWC,EAPG,SAACC,GAAD,OAChB,yBAAKN,UAAU,eACZM,EAAMC,WCUIC,EAZA,SAACF,GACd,IAAMG,EAAU,CAAC,OAGjB,MAFqB,qBAAVH,GAA+C,qBAAfA,EAAMI,MAC/CD,EAAQE,KAAK,QAAUL,EAAMI,MAE7B,4BAAQV,UAAWS,EAAQG,KAAK,MAC7BN,EAAMC,WCmCEM,EAvCA,kBACb,6BAASb,UAAU,UACjB,kBAACc,EAAD,KACE,kBAACC,EAAD,UACA,kBAACA,EAAD,YACA,kBAACA,EAAD,UACA,kBAACA,EAAD,CAAQL,KAAK,UAAb,SAGF,kBAACI,EAAD,KACE,kBAACC,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,CAAQL,KAAK,UAAb,MAGF,kBAACI,EAAD,KACE,kBAACC,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,CAAQL,KAAK,UAAb,MAGF,kBAACI,EAAD,KACE,kBAACC,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,CAAQL,KAAK,UAAb,MAGF,kBAACI,EAAD,KACE,kBAACC,EAAD,UACA,kBAACA,EAAD,CAAQL,KAAK,SAAb,KACA,kBAACK,EAAD,CAAQL,KAAK,UAAb,QCjBSM,E,4MAfbC,MAAQ,CACNC,SAAU,GACVC,OAAQ,G,uDAGR,OACE,0BAAMnB,UAAU,cACd,kBAACoB,EAAD,CAAQF,SAAUG,KAAKJ,MAAMC,SAAUC,OAAQE,KAAKJ,MAAME,SAC1D,kBAACG,EAAD,W,GATiBC,IAAMC,WCQhBC,EAPH,kBACV,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCIgB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6fa3bfb2.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst resultScreen = () => (\n  <div className=\"result-screen\">\n    30\n  </div>\n);\n\nexport default resultScreen;","import React from 'react';\n\n\nconst computationScreen = () => (\n  <div className=\"computation-screen\">\n    6x5 =\n  </div>\n);\n\n\n\nexport default computationScreen;","import React from 'react';\nimport ResultScreen from './ResultScreen/ResultScreen';\nimport ComputationScreen from './ComputationScreen/ComputationScreen';\n\n\n\nconst screen = () => (\n  <section className=\"screen\">\n    <ComputationScreen />\n    <ResultScreen />\n  </section>\n);\n\n\n\nexport default screen;","import React from 'react';\n\n\nconst keypadRow = (props) => (\n  <div className=\"keypad__row\">\n    {props.children}\n  </div>\n);\n\n\nexport default keypadRow;","import React from 'react';\n\n\nconst button = (props) => {\n  const classes = ['btn'];\n  if (typeof props !== 'undefined' && typeof props.type !== 'undefined')\n    classes.push('btn--' + props.type);\n  return (\n    <button className={classes.join(' ')}>\n      {props.children}\n    </button>\n  );\n}\n\n\nexport default button;","import React from 'react';\nimport KeypadRow from './KeypadRow/KeypadRow';\nimport Button from '../../../components/Button/Button';\n\n\nconst keypad = () => (\n  <section className=\"keypad\">\n    <KeypadRow>\n      <Button>C</Button>\n      <Button>+/-</Button>\n      <Button>%</Button>\n      <Button type=\"yellow\">รท</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button>7</Button>\n      <Button>8</Button>\n      <Button>9</Button>\n      <Button type=\"yellow\">x</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button>4</Button>\n      <Button>5</Button>\n      <Button>6</Button>\n      <Button type=\"yellow\">-</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button>1</Button>\n      <Button>2</Button>\n      <Button>3</Button>\n      <Button type=\"yellow\">+</Button>\n    </KeypadRow>\n    \n    <KeypadRow>\n      <Button>0</Button>\n      <Button type=\"large\">.</Button>\n      <Button type=\"yellow\">=</Button>\n    </KeypadRow>\n  </section>\n);\n\n\nexport default keypad;","import React from 'react';\nimport Screen from './Screen/Screen';\nimport Keypad from './Keypad/Keypad';\n\n\nclass Calculator extends React.Component {\n  state = {\n    equation: '',\n    result: 0\n  }\nrender() {\n    return (\n      <main className=\"calculator\">\n        <Screen equation={this.state.equation} result={this.state.result} />\n        <Keypad />\n      </main>\n    );\n  }\n}\n\n\nexport default Calculator;","import React from 'react';\nimport './styles/styles.css';\nimport Calculator from './layout/Calculator/Calculator';\n\n\n\nconst app = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n);\n\n\nexport default app;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}